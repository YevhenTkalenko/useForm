register - базова функція для налаштування прив'язування поля до форми. Ця функція передає дані про поле до якого прив'язана і дозволяє автоматично відслідковувати стан і помилки у полі.

1) Синтаксис.
<input
    type="email"
    placeholder="Enter your email"
    {...register("email", {
        required: "This field is required", <---- Тут вібувається валідація даних
    })}
/>

2)Ініціалізація. ----- const { register } = useForm();

--------------------------------------------------------

handleSubmit - це функція, яка призначена для відправки даних з форми форми. Вона у себе у якості аргумента приймає функцію-обробника даних, яка обробля отримані дані із форми. 

1) Синтаксис.

      <form onSubmit={handleSubmit(onSubmit)}>
        <input
          type="email"
          placeholder="Enter your email"
          {...register("email", {
            required: "This field is required",
          })}
        />
        <textarea placeholder="Enter yout message"></textarea>
        <button type="submit">Send your message</button>
      </form>

2) Функція-обробник даних.

  const onSubmit = (data: any) => {
    console.log(data);
  };

data - це якраз усі поля, які збирає register. Це обьект, ключі у якого це дані, що вказані у ...register('<field name>')

3)Ініціалізація. ----- const { register, handleSubmit } = useForm();


--------------------------------------------------------

reset - функція хука useForm, яка дозволяє очистити усі поля. 
resetField - функція хука useForm, яка дозволяє очистити конкретне поле.

1) Синтаксис.

    <button onClick={() => reset()}>Reset</button>
    <button onClick={() => resetField("email")}>Reset Email</button> --- в resetField обов'язково потрібно додавати назву поля.

2)Ініціалізація. -----  const { reset, resetField } = seForm<IForm>();

3)Встановлення даних. 
  Як і setValue, reset може встановити дані на поле, очистивши його попередньої, але вже на усі поля. Тобто вже більш розширена версія setValue. 

  reset({
    email: '"test@test.com"',
    message: "test message",
  });

  Увага!! Вступає в конфлікт з watch, якщо якісь дані запино, то watch буде запускати вічний цикл. 

--------------------------------------------------------

getValues - функція, яка дозволяє отримати дані, але не слідкує за зміною цих даних. 
watch - функція, яка дозволяє отримати дані і слідкує за зміною цих даних. (Майже як onChange)

1) Cинтаксис

  const onSubmit = () => {
    console.log(getValues("email"));
  };

  Функція onSubmit виведе значення поля из именем email у консоль. 

  const watchEmail = watch("email"); - вказуємо, за яким полем потрібно слідкувати

  useEffect(() => {
    console.log(watchEmail);
  }, [watchEmail]); 

  В useEffect встановлюємо залежність, що при зміні watchEmail буде виводитись кожен раз консоль із актуальними даними з прив'язаного поля


2) Ініціалізація. -----  const { getValues, watch } = seForm<IForm>(); 

--------------------------------------------------------

setValue - функція, яка дозволяє встановити дані у якесь поле (схоже на defaultValues або <input value={}/>), але тільки в одне поле.

Може викликатись у різних випадках і при різних умовах встановлювати дані. Наприклад, потрібно отримати і встановити дані, які вже нам відомо і ми їх отримуємо із сервера. 

1) Синтаксис 

setValue("email", "test@test.com")

2) Ініціалізація. -----  const { setValue } = seForm<IForm>(); 


--------------------------------------------------------

Основні опції в хука useForm - це defaultValues і mode.
defaultValues - це значення по завчуванні, які будуть втавлені у поля (input) полей форми. 
mode - дуже важлива опція, яка дозволяє робити перевірку за однії з подій. В даному контексі - це подія onChange. Може бути all, onBlur, onChange, onTouched, onSubmit. По замовчуванні стоїть onSubmit (тобто при натисканні кнопки submit)

1) Синтаксис.

  const { } = useForm({
    defaultValues: {
      email: "your email@post.com",
    },
    mode: 'onChange'
  });


--------------------------------------------------------

Налаштування валідації відбувається в опціях функції register("<name>", {
    <--------- Ось тут
})

Базові налаштування
1) valueAsNumber: true - дозволяє отримати дані у форматі number, а не string як позамовчуванні. 
2) required: "This field is required" - повідомлення для користувача ????
3) pattern: {
        value: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$/,
        message: "Invalid email address",
} - дозволяє перевіряти валідність введених даних з регулярним повідомленням і самим повідомленням про помилку. 

4) minLength/maxLength - дозволяє встановити мінімальну/максимальну кількість символів у полі. 
        minLength: {
          value: 2,
          message: "Message must be at least 2 characters",
        },

    ключ value - кількість символів.
    клюс message - повыдомлення у разі помилки

--------------------------------------------------------
Обробка помилок відбувається у об'єкті errors. По дефолту, цей обьект пустий, так як при завантаженні форми ще немає помилок.
Як тільки туди починають падати помилки, то цей об'єкт отримує ключ з поля register("<name>") і назву помилки message. 

1) Синтаксис.
  const { formState: { errors }, } = useForm<IForm>({
    mode: "onChange",
  });

2) Результат в консолі.

{
    email:  {
    message: "Invalid email address"
    ref: input,
    type: "pattern"
    }

}

Таким чином ми можемо опрацювати змінну errors по умові і вивести її message на екран. 

<div style={{color: 'red'}}>
    {errors.email && errors.email.message}
</div>

Якщо будуть нові помилки, то вони будуть складатись у об'єкт еrrors і їх можна будет опрацювати по ключу. 
